setwd("~/Google Drive2018Spring/2018Spring/GI05/SY09/self/TP0")
# Matrices simples
A<-matrix(1:9,nrow=3,byrow=T)
A
B<-matrix(c(5,3,7,4,6,3,1,6,3,2,8,5),nrow=4,byrow=T)
B
?matrix()
dim(A)
dim(B)
na<-dim(A)[1] # nombre de lignes de la matrice
pa<-dim(A)[2] # nombre de colonnes de la matrice
# Vecteur simple
v<-1:3
# Il est possible de concat??ner des matrices en les agr??geant par lignes ou par colonnes :
# cbind (column bind) copie les colonnes de la matrice v ?? la suite de celles de la matrice A
C<-cbind(A,v)
C
# rbind (row bind) copie les lignes de la matrice B ?? la suite de celles de la matrice A
D<-rbind(A,B)
D
# Op??rations matricielles
matrix(1,3,2) # cr???? une matrice de 3 ligne et 2 colonnes avec toutes les valeurs initialis??es ?? 1
t(A) # transposition de matrice
B%*%A # produit matriciel B*A
A*A # produit terme ?? terme A*A
A%*%A # produit matriciel A*A
A
E <- array(1,c(4,3,2)) # contient deux matrices de 4 lignes et 3 colonnes initialis??es avec la valeur 1
E
E[,,1]
E[,,2]
E[,,2] = E[,,2]*2
E[,,2]
# Notons que le ?? liage ?? de matrices selon la troisi??me dimension,
# de mani??re ?? former un tel tableau de nombres, n??cessite l???installation
# et le chargement du package abind
library(abind)
install.packages("abind")
# Notons que le ?? liage ?? de matrices selon la troisi??me dimension,
# de mani??re ?? former un tel tableau de nombres, n??cessite l???installation
# et le chargement du package abind
library(abind)
F1 <- matrix(1,4,3)
F2 <- matrix(2,4,3)
F1
F2
# "concatener" les matrices les unes ?? la suite des autres
F <- abind(F1, F2, along=1) # concat??ner les matrices en collant les lignes (m??me nombre de colonnes)
F
# "concatener" les matrices les unes ?? la suite des autres
F3 <- abind(F1, F2, along=1) # concat??ner les matrices en collant les lignes (m??me nombre de colonnes)
F4 <- abind(F1, F2, along=3) # concat??ner les matrices en collant les colonnes (m??me nombre de lignes)
F6 <- abind(F1, F2, along=3) # concat??ner les matrices en les collant les unes ?? la suite des autres (m??mes dimensions)
F3
F4
F6
?abind
# "concatener" les matrices les unes ?? la suite des autres
F3 <- abind(F1, F2, along=1) # concat??ner les matrices en collant les lignes (m??me nombre de colonnes)
F4 <- abind(F1, F2, along=2) # concat??ner les matrices en collant les colonnes (m??me nombre de lignes)
F6 <- abind(F1, F2, along=3) # concat??ner les matrices en les collant les unes ?? la suite des autres (m??mes dimensions)
F4
F3
F6
ptA = prodtrans(A)
A<-matrix(c(1,2,5,3,0,9),nrow=3,byrow=T)
max(x)
x<-c(2,4,3,7,1)
max(x)
max(A)
apply(A,MARGIN = 1,max) # applique max a toutes les lignes (MARGIN=1)
A
apply(A,MARGIN = 2,max) # applique max a toutes les colonnes (MARGIN=2)
mean(x)
mean(A)
apply(A,MARGIN = 2,mean) # applique mean a toutes les colonnes (MARGIN=2)
# Que calculent les fonctions var et sd ?
var(x)
var(A)
sd(x)
sd(A)
# On comparera les r??sultats des fonctions var et cov.wt
var(A)
cov.wt(A, method="unbiased") # calcul de la covariance avec un estimateur de la variance non biais??
plot(x,y,pch=22)
x<-c(2,2,2,1,3,4,1,1)
hist(x)
x<-c(1,2,3,4,5)
y<-c(1,4,9,16,25)
plot(x,y)
plot(x,y,pch=22)
plot(x,y,pch=19,col="blue")
plot(x,y,type="l",col="blue")
plot(x,y,pch=19,col="blue")
plot(x,y,pch=22)
plot(x,y)
plot(x,y)
plot(x,y,pch=22)
plot(x,y,pch=19,col="blue")
B = apply(A, MARGIN = 2, center)
A<-matrix(c(1,2,5,3,0,9),nrow=3,byrow=T)
source("TP0/center.R")
n = dim(A)[1]
B = apply(A, MARGIN = 2, center)
setwd("~/Google Drive2018Spring/2018Spring/GI05/SY09/self/TP1")
clear()
rm()
rm(list = ls())
#un exemple dans le poly de page 43
math <- t(t(c(6,8,6,14.5,14,11,5.5,13,9)))
math
#un exemple dans le poly de page 43
a = c(6,8,6,14.5,14,11,5.5,13,9)
a
#un exemple dans le poly de page 43
a = t(c(6,8,6,14.5,14,11,5.5,13,9))
a
#un exemple dans le poly de page 43
a = t(t(c(6,8,6,14.5,14,11,5.5,13,9)))
a
math <- t(t(c(6,8,6,14.5,14,11,5.5,13,9)))
math
scie <- t(t(c(6,8,7,14.5,14,10,7,12.5,9.5)))
scie
fran <- t(t(c(5,8,11,15.5,12,5.5,14,8.5,12.5)))
fran
lati <- t(t(c(5.5,8,9.5,15,12.5,7,11.5,9.5,12)))
lati
d_m <- t(t(c(8,9,11,8,10,13,10,12,18)))
d_m
notes <- cbind(math,scie,fran,lati,d_m)
notes
rownames(notes) <- c("jean", "aline", "annie", "monique", "didier", "andre", "pierre", "brigitte", "evelyne")
colnames(notes) <- c("math", "scie", "fran", "lati", "d-m")
notes
#calculer la matrice centrage
notes_centrage <- scale(notes, center = TRUE, scale = FALSE)
notes_centrage
？eigen
?eigen
#calculer la matrice de covariance
notes_covariance <- cov.wt(notes_centrage, method = "ML")
notes_covariance
# diagonaliser la covariance
notes_covariance_diag <- eigen(notes_covariance$cov)
notes_covariance_diag
#valeurs propres
valeurs_propres <- notes_covariance_diag$values
valeurs_propres
#vecteurs propres
vecteurs_propres <- notes_covariance_diag$vectors
vecteurs_propres
for(iter in 1:dim(vecteurs_propres)[2]) {
print(iter)
print(xtable(as.matrix(vecteurs_propres[,iter])), floating=FALSE, tabular.environment="pmatrix", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE) # print matrix
}
install.packages("plotrix")
install.packages("xtable")
library("plotrix")
library("xtable")
library("ade4")
install.packages("ade4")
for(iter in 1:dim(vecteurs_propres)[2]) {
print(iter)
print(xtable(as.matrix(vecteurs_propres[,iter])), floating=FALSE, tabular.environment="pmatrix", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE) # print matrix
}
# les pourcentages d'inerties sont simplement la quantite / la somme de la quantite totale d'inertie
pourcentage_inertie_expliquee = valeurs_propres / sum(valeurs_propres) * 100
vecteurs_propres
sum(valeurs_propres)
valeurs_propres
# les pourcentages d'inerties sont simplement la quantite / la somme de la quantite totale d'inertie
pourcentage_inertie_expliquee = valeurs_propres / sum(valeurs_propres) * 100
pourcentage_inertie_expliquee
#la matrice des composantes principales
ACP <- notes_centrage %*% vecteurs_propres
ACP
#Vue que les pourcentages d'inertie expliquee par chaque axes sont 57.69, 24.65, 17.59, 0.04, 0.02
#les pourcentages d'inertie expliquee par les sous-espaces principaux sont 57.69, 82.34, 99.94, 99.98 et 100 (add them one by one)
#donc le nuage initial est pratiquement dans un espace de dimension 3
#Dessiner le premier plan factoriel entre composant1 et composant2
plot(-9:10,-9:10,type = "n", xlab = "Axe1", ylab = "Axe2")
#Vue que les pourcentages d'inertie expliquee par chaque axes sont 57.69, 24.65, 17.59, 0.04, 0.02
#les pourcentages d'inertie expliquee par les sous-espaces principaux sont 57.69, 82.34, 99.94, 99.98 et 100 (add them one by one)
#donc le nuage initial est pratiquement dans un espace de dimension 3
#Dessiner le premier plan factoriel entre composant1 et composant2
plot(-9:10,-9:10,type = "n", xlab = "Axe1", ylab = "Axe2")
abline(h=0,v=0)
#Ajouter des points dans le premier plan factoriel
text(ACP[,1], ACP[,2], labels = c("jean", "aline", "annie", "monique", "didier", "andre", "pierre", "brigitte", "evelyne"))
ACP
#Vue que les pourcentages d'inertie expliquee par chaque axes sont 57.69, 24.65, 17.59, 0.04, 0.02
#les pourcentages d'inertie expliquee par les sous-espaces principaux sont 57.69, 82.34, 99.94, 99.98 et 100 (add them one by one)
#donc le nuage initial est pratiquement dans un espace de dimension 3
#Dessiner le premier plan factoriel entre composant1 et composant2
plot(-9:10,-9:10,type = "n", xlab = "Axe1", ylab = "Axe2")
#Dessiner le premier plan factoriel entre composant1 et composant3
plot(-9:10,-9:10,type = "n", xlab = "Axe1", ylab = "Axe3")
abline(h=0,v=0)
#Ajouter des points dans le premier plan factoriel
text(ACP[,1], ACP[,3], labels = c("jean", "aline", "annie", "monique", "didier", "andre", "pierre", "brigitte", "evelyne"))
#Dessiner le premier plan factoriel entre composant1 et composant4
plot(-9:10,-9:10,type = "n", xlab = "Axe1", ylab = "Axe4")
abline(h=0,v=0)
#Ajouter des points dans le premier plan factoriel
text(ACP[,1], ACP[,4], labels = c("jean", "aline", "annie", "monique", "didier", "andre", "pierre", "brigitte", "evelyne"))
#Calculer des contributions
#contributions relatives des axes aux individus
# apply(notes_centrage^2, 1, sum)
# 1/apply(notes_centrage^2, 1, sum)
# diag(1/apply(notes_centrage^2, 1, sum))
# ACP^2
COR <- diag(1/apply(notes_centrage^2, 1, sum)) %*% ACP^2
COR
#contributions relatives des individus aux axes
n <- dim(notes)[1]
# (1/n)*ACP^2
# 1/diag(valeurs_propres)
# diag(1/diag(valeurs_propres))
# diag(diag(1/diag(valeurs_propres)))
CTR <- (1/n)*ACP^2 %*% diag(diag(1/diag(valeurs_propres)))
CTR
#representation des variables
# sqrt((n - 1)/n)
# apply(notes_centrage,2,sd)
# (sqrt((n - 1)/n)*apply(notes_centrage,2,sd))
# 1/(sqrt((n - 1)/n)*apply(notes_centrage,2,sd))
# diag(1/(sqrt((n - 1)/n)*apply(notes_centrage,2,sd)))
# diag(1/(sqrt((n - 1)/n)*apply(notes_centrage,2,sd))) %*% vecteurs_propres
# diag(sqrt(valeurs_propres))
cor <- diag(1/(sqrt((n - 1)/n)*apply(notes_centrage,2,sd))) %*% vecteurs_propres %*% diag(sqrt(valeurs_propres))
rownames(cor) <- c("math", "scie", "fran", "lati", "d-m")
colnames(cor) <- c("F1", "F2", "F3", "F4", "F5")
cor
plot(-1:1, -1:1, type = "n", xlab = "Axe1", ylab = "Axe2")
abline(h=0,v=0)
draw.circle(0,0,1)
text(cor[,1], cor[,2], labels = c("math", "scie", "fran", "lati", "d-m"))
plot(-1:1, -1:1, type = "n", xlab = "Axe1", ylab = "Axe2")
abline(h=0,v=0)
draw.circle(0,0,2)
text(cor[,1], cor[,2], labels = c("math", "scie", "fran", "lati", "d-m"))
draw.circle(0,0,0.5)
plot(-1:1, -1:1, type = "n", xlab = "Axe1", ylab = "Axe3")
abline(h=0,v=0)
draw.circle(0,0,1)
text(cor[,1], cor[,3], labels = c("math", "scie", "fran", "lati", "d-m"))
plot(-1:1, -1:1, type = "n", xlab = "Axe1", ylab = "Axe4")
abline(h=0,v=0)
draw.circle(0,0,1)
text(cor[,1], cor[,4], labels = c("math", "scie", "fran", "lati", "d-m"))
#Utiliser la fonction princomp() pour calculer les composantes principales
#On utilise la matrice de covariance pour calculer les composantes principales
PCA = princomp(notes)
PCA <- princomp(notes, cor = FALSE)
PCA
summary(PCA)
summary(PCA, loadings = TRUE)
#les ecarts-types des composantes principales
PCA$sdev
#les vecteurs propres
PCA$loadings
#les donnees des composantes principales
PCA$scores
#utiliser la fonction plot
plot(PCA)
#Dessiner le premier plan factoriel entre composant1 et composant2
plot(PCA$scores[,1], PCA$scores[,2], xlim = c(-11,11), ylim = c(-11,11), xlab = "Comp.1", ylab = "Comp.2")
scores
#les donnees des composantes principales
PCA$scores
abline(h=0,v=0)
text(PCA$scores[,1], PCA$scores[,2], labels = rownames(PCA$scores), cex= 0.7, pos=3) #Ajouter des points dans le premier plan factoriel
plot(PCA$scores, xlim = c(-11,11), ylim = c(-11,11))
#Dessiner le premier plan factoriel entre composant1 et composant3
plot(-11:11,-11:11,type = "n", xlab = "Comp.1", ylab = "Comp.3")
abline(h=0,v=0)
#Ajouter des points dans le premier plan factoriel
text(PCA$scores[,1], PCA$scores[,3], labels = c("jean", "aline", "annie", "monique", "didier", "andre", "pierre", "brigitte", "evelyne"))
plot(PCA$loadings, xlim = c(-1,1), ylim = c(-1,1))
#Ajouter des points dans le premier plan factoriel
text(PCA$scores[,1], PCA$scores[,3], labels = c("jean", "aline", "annie", "monique", "didier", "andre", "pierre", "brigitte", "evelyne"))
#Dessiner le premier plan factoriel entre composant1 et composant3
plot(-11:11,-11:11,type = "n", xlab = "Comp.1", ylab = "Comp.3")
abline(h=0,v=0)
#Ajouter des points dans le premier plan factoriel
text(PCA$scores[,1], PCA$scores[,3], labels = c("jean", "aline", "annie", "monique", "didier", "andre", "pierre", "brigitte", "evelyne"))
plot(PCA$loadings, xlim = c(-1,1), ylim = c(-1,1))
abline(h=0,v=0)
text(PCA$loadings, labels=rownames(PCA$loadings), cex= 0.7, pos=4)
#notes
#utiliser la fonction biplot
cor(notes, PCA$scores)
PCA$scores
biplot(PCA)
biplot(PCA, pc.biplot = T)
biplot(PCA)
biplot(PCA, choices = c(1,2))
biplot(PCA, pc.biplot = T)
biplot(PCA)
biplot(PCA, pc.biplot = T)
biplot(PCA, choices = c(1,2))
biplot(PCA, choices = c(1,2))
biplot(PCA, choices = c(1,3))
?biplot
#Dessiner le premier plan factoriel entre composant1 et composant2
plot(PCA$scores[,1], PCA$scores[,2], xlim = c(-11,11), ylim = c(-11,11), xlab = "Comp.1", ylab = "Comp.2")
abline(h=0,v=0)
text(PCA$scores[,1], PCA$scores[,2], labels = rownames(PCA$scores), cex= 0.7, pos=3) #Ajouter des points dans le premier plan factoriel
plot(PCA$scores, xlim = c(-11,11), ylim = c(-11,11))
#notes
#utiliser la fonction biplot
cor(notes, PCA$scores)
PCA$scores
biplot(PCA)
biplot(PCA, pc.biplot = T)
?biplot
#notes
#utiliser la fonction biplot
cor(notes, PCA$scores)
PCA$scores
biplot(PCA)
biplot(PCA, pc.biplot = T)
biplot(PCA, pc.biplot = T)
biplot(PCA)
biplot(PCA, pc.biplot = T)
biplot(PCA, choices = c(1,2)) #specifying the components to plot
biplot(PCA, choices = c(1,3))
A = matrice(1:9, nrow = 3, byrow = T)
A = matrix(1:9, nrow = 3, byrow = T)
B = matrix(c(5,3,7,4,6,3,1,6,3,2,8,5), nrow = 4, byrow = T)
A
B
B %*% A
?%*%
? %*%
?%*%
?%*%
E <- array(1,c(4,3,2))
E
E[,,2]
E[,,1]
E[,,2] <- E[,,2]*2 #第二个矩阵
E[,,2]
A = matrix(c(1,2,5,3,0,9), nrow = 3, byrow = TRUE)
A
x = c(2,4,3,7,1)
x
max(x)
max(A)
apply(A, 1, max)
apply(A, 1, max)
myfunction = function(x){sum(x^2)}
apply(A, 1, myfuction)
apply(A, 1, myfunction)
x=array(1:20,c(4,5))
x
t(x)
x.mean = apply(x, 2, mean)
x.mean
t(x) - x.mean
(t(x) - x.mean)/x.sd
x.sd = apply(x, 2, sd)
(t(x) - x.mean)/x.sd
t((t(x) - x.mean)/x.sd))
t((t(x) - x.mean)/x.sd)
#data iris
data(iris)
class(iris)
names(iris)
iris[,1]
iris$Sepal.Length
class(iris[,1])
class(iris[,2])
class(iris[,3])
class(iris[,4])
class(iris[,5])
summary(iris)
apply(iris[,1:4],2,mean)
cor(iris[,1:4])
print(cor(iris[,1:4]),digits=3)
plot(iris)
boxplot(iris)
plot(iris)
par(mfrow = c(2,2))
def.par = par(no.readonly = T)
par(mfrow = c(2,2))
for(i in 2:5){
hist(ris[, i])
}
par(def.par)
def.par = par(no.readonly = T)
par(mfrow = c(2,2))
for(i in 2:5){
hist(iris[, i])
}
par(def.par)
def.par = par(no.readonly = T)
par(mfrow = c(2,2))
for(i in 2:5){
hist(iris[, i])
}
par(def.par)
plot(iris) #meaning
#Error in hist.default(iris[, i]) : 'x' must be numeric 第5个不是numeric
pie(summary(iris$Species))
summary(iris$Species)
barplot(summary(iris$Species))
quartz()
quartz(iris)
quartz(iris)
quartz(iris$Species)
x11()
install.packages("x11")
x11()
install.packages("XQuartz")
quartz(iris$Species)
x11()
plot(iris[,1:4], col=c("red","green","blue")[iris$Species])
pairs(iris[,1:4],main="Iris de Fisher",pch=21,bg=c("red","green3","blue")[iris$Espèce])
class(iris[,5]) #factor 1-4 all numeric
names(iris)
pairs(iris[,1:4],main="Iris de Fisher",pch=21,bg=c("red","green3","blue")[iris$Species])
plot(iris[,1:4], col=c("red","green","blue")[iris$Species]) #彩色的图
pairs(iris[,1:4],main="Iris de Fisher",pch=21,bg=c("red","green3","blue")[iris$Species])
attach(iris)
inter<-seq(min(Petal.Length),max(Petal.Length),by=(max(Petal.Length)-min(Petal.Length))/10)
Petal
names(iris)
h1<-hist(plot=F,Petal.Length[Species==’setosa’],breaks=inter)
iris$Species
h1<-hist(plot=F,Petal.Length[Species==setosa],breaks=inter)
h1<-hist(plot=F,Petal.Length[Species=="setosa"],breaks=inter)
#iris$Species
h2<-hist(plot=F,Petal.Length[Species==’versicolor’],breaks=inter)
#iris$Species
h2<-hist(plot=F,Petal.Length[Species== "versicolor"],breaks=inter)
h3<-hist(plot=F,Petal.Length[Species== "virginica"],breaks=inter)
#iris$Species
h2<-hist(plot=F,Petal.Length[Species== "versicolor"],breaks=inter)
?hist
barplot(rbind(h1$counts,h2$counts,h3$counts),space=0,legend=levels(Species),main="LoPe",col=c(’blue’,’red’,’yellow’))
barplot(rbind(h1$counts,h2$counts,h3$counts),space=0,legend=levels(Species),main="LoPe",col=c('blue','red','yellow'))
hist(iris)
hist(iris[,1:4])
hist(iris[,1:2z])
hist(iris[,1:2])
postscript(’exemple.eps’,horizontal=F,width=12/2.5,height=12/2.5)
postscript('exemple.eps',horizontal=F,width=12/2.5,height=12/2.5)
pairs(iris[2:5],main="Les Iris",pch=21,bg=c("red","green3","blue")[Species])
dev.off()
postscript('exemple.eps',horizontal=F,width=12/2.5,height=12/2.5)
pairs(iris[2:5],main="Les Iris",pch=21,bg=c("red","green3","blue")[Species])
dev.off()
pairs(iris[2:5],main="Les Iris",pch=21,bg=c("red","green3","blue")[Species])
detach(iris)
notes <- read.csv("median-sy02-p2014.csv", header=F, na.strings=c("NA","ABS"))
setwd("~/Google Drive2018Spring/2018Spring/GI05/SY09/self/TP0")
notes <- read.csv("median-sy02-p2014.csv", header=F, na.strings=c("NA","ABS"))
setwd("~/Google Drive2018Spring/2018Spring/GI05/SY09/self/TP0/data")
notes <- read.csv("median-sy02-p2014.csv", header=F, na.strings=c("NA","ABS"))
names(notes) <- c("branche","note")
notes <- notes[-which(is.na(notes$note)),]
names(notes) <- c("branche","note")
notes
notes$branche <- as.character(notes$branche)
notes$branche
notes$branche <- substr(notes$branche,1,2)
notes$branche
notes$branche <- as.factor(notes$branche)
notes$branche
notes
#数据分析步骤
notes <- read.csv("median-sy02-p2014.csv", header=F, na.strings=c("NA","ABS"))
names(notes) <- c("branche","note")
notes <- notes[-which(is.na(notes$note)),]#去掉缺省值
notes
notes$branche <- as.character(notes$branche) #Convertir l’information de branche en chaîne de caractère
notes$branche <- substr(notes$branche,1,2) #取出了第一第二个
notes$branche <- as.factor(notes$branche) #reconvertir en variable qualitative
notes
